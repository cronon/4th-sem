## 1.3 Язык программирования Ruby
Создатель Ruby — японский разработчик Юкихиро Мацумото (Matz).
Ruby — динамический, рефлективный, интерпретируемый высокоуровневый язык программирования для быстрого и удобного объектно-ориентированного программирования. Язык обладает независимой от операционной системы реализацией многопоточности, строгой динамической типизацией, сборщиком мусора и многими другими возможностями. Ruby близок по особенностям синтаксиса к языкам Perl и Eiffel, по объектно-ориентированному подходу — к Smalltalk. Также некоторые черты языка взяты из Python, Lisp, Dylan и Клу.

Кроссплатформенная реализация интерпретатора языка является полностью свободной.
###Философия
Мацумото, фанат объектно-ориентированного программирования, мечтал о языке, более мощном, чем Perl, и более объектно-ориентированном, чем Python. Основное назначение Ruby — создание простых и в то же время понятных программ, где важна не скорость работы программы, а малое время разработки, понятность и простота синтаксиса.
Язык следует принципу «наименьшей неожиданности»: программа должна вести себя так, как ожидает программист. Однако в контексте Ruby это означает наименьшее удивление не при знакомстве с языком, а при его основательном изучении. Сам Мацумото утверждает, что целью разработки была минимизация неожиданностей при программировании для него, но после распространения языка он с удивлением узнал, что мышление программистов похоже, и для многих из них принцип «наименьшей неожиданности» совпал с его принципом.
Ruby также унаследовал идеологию языка программирования Perl в части предоставления программисту возможностей достижения одного и того же результата несколькими различными способами. Люди различны, и им для свободы необходима возможность выбирать. «Я предпочитаю обеспечить много путей, если это возможно, но поощрять или вести пользователей, чтобы выбрать лучший путь, если это возможно».
Одной из основных целей разработки было освобождение программистов от рутинной работы, которую вычислитель может выполнять быстрее и качественнее. Особое внимание, в частности, уделялось будничным рутинным занятиям (обработка текстов, администрирование), и для них язык настроен особенно хорошо.
В противовес машинно-ориентированным языкам, работающим быстрее, целью этой разработки был язык, наиболее близкий к человеку. Любая работа с компьютером выполняется людьми и для людей, и необходимо заботиться в первую очередь о затрачиваемых усилиях людей. Язык позволяет максимально быстро и просто для человека выполнить задачу, хотя, возможно, это и потребует дополнительного времени работы компьютера. Сейчас, на пороге технологической сингулярности, машинное время невероятно дешево. Так стоит ли тратить время человека на перекладывание байтов?
Принципы программирования и устройства языка иногда выделяются в термин «Путь Ruby» (англ. Ruby Way). Хэл Фултон выделяет такие принципы, как «просто, но не слишком просто», «принцип наименьшего удивления», вторичность скорости работы программы, динамичность, простые строгие правила, выполнение которых не доходит до педантизма, потребность создавать полезные и красивые программы как причина программирования. В целом они не имеют точной формулировки и иногда этот термин используется для критики.
### Возможности Ruby
Интерпретируемый язык:
* Возможность прямых системных вызовов.
* Мощная поддержка операций со строками и правилами (регулярными выражениями).
* Мгновенное проявление изменений во время разработки.
* Отсутствие стадии компиляции.

Простое и быстрое программирование:
* Не надо объявлять переменные.
* Переменные динамически типизированы.
* Простой и последовательный синтаксис.
* Автоматическое управление памятью.

Объектно-ориентированное программирование:
* Всё есть объект. Даже имя класса - это экземпляр класса Class.
* Классы, методы, наследование, полиморфизм, инкапсуляция и так далее.
* Методы-одиночки.
* Примеси (mixins) при помощи модулей (возможность расширить класс без наследования);
* Итераторы и замыкания.
* Широкие возможности метапрограммирования.

Удобства:
* Неограниченный диапазон значений целых чисел.
* Все операторы и управляющие структуры являются методами и возвращают значение.
* Динамическая загрузка.
* Механизм перехвата исключений.
* Поддержка потоков; как собственных, так и систем семейства UNIX.

Недостатки:
* Неуправляемость некоторых процессов (таких, как выделение памяти), невозможность задания низкоуровневых структур данных или подпрограмм;
* Невозможность компиляции и сопутствующей ей оптимизации программы;
* Открытость исходного кода даже в готовой программе (есть средство упаковки исходного кода в .exe-файл под Windows);
* Следствие двух первых недостатков — весьма низкая скорость запуска и выполнения программ.
* Не так уж и часто, но все же бывает, что документация только на японском.

Ruby используется в NASA, NOAA (национальная администрация по океану и атмосфере), Motorola и других крупных организациях. Следующие программы используют Ruby как скриптовый язык для расширения возможностей программы или написаны на нём (частично или полностью).
* RPG Maker (RPG Maker XP) — RGSS (Ruby Game Scripting System)
* Amarok
* SketchUp
* Inkscape — скрипты для обработки векторных изображений
* Metasploit
* Chef, Puppet — системы управления конфигурациями
* Redmine — багтрекер
* XChat
* WATIR (англ. Web Application Testing in Ruby) — свободное средство для автоматического тестирования веб-приложений в браузере.
* Puppet